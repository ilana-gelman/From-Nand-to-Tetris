// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/

// The inputs of the extended ALU are instruction[9], x[16], y[16].
// The output is defined as follows:
// If instruction[7..8] == 1, 1, the output is the same as the regular ALU,
// where instruction[5]=zx, instruction[4]=nx, ..., instruction[0]=no.
// If instruction[8] == 0, the output will be a shift of the input:
// - If instruction[4] == 0, the input "y" will be shifted, otherwise "x", 
// - If instruction[5] == 0, the shift will be a right-shift, otherwise left.

CHIP ExtendAlu {
     IN x[16], y[16], instruction[9];
     OUT out[16], zr, ng;

     PARTS:
     // Put you code here:
     /*1. Mark flag (doAlu) and calculate alu output and zr,ng flags*/
     And(a= instruction[8],b= instruction[7],out= doAlu);
     ALU(x= x,y= y,zx= instruction[5],nx= instruction[4],zy= instruction[3],ny= instruction[2],f= instruction[1],no= instruction[0],out= outAlu,zr= zr1,ng= ng1);
     
     /*2.Determine which input (x or y) to shift and shift them both*/
     Mux16(a= y,b= x,sel=instruction[4],out= valToShift);
     ShiftLeft(in= valToShift,out= valShiftLeft);
     ShiftRight(in= valToShift,out= valShiftRight);

     /*3.Select the correct shifted value according to instruction[5]*/
     Mux16(a= valShiftRight,b= valShiftLeft,sel=instruction[5],out= shifted,out[0..7]=s1, out[8..15]= s2,out[15]=msbshifted);

     /*4.Mark flag (selOut) which knows which output is correct*/
     And(a= doAlu,b= instruction[8],out= selOut);
     
     /*5.calculate ng,zr in shift - mode*/
     Or8Way(in=s1,out=half1shifted);
     Or8Way(in=s2,out=half2shifted);
     Or(a=half1shifted,b=half2shifted,out=zeroshifted);
     Not(in=zeroshifted ,out=zr2);
     And(a= true,b= msbshifted,out= ng2);

     /*6.Selects the correct output according to selOut flag*/
     Mux(a=ng2 ,b= ng1,sel= selOut,out=ng );
     Mux(a=zr2 ,b= zr1,sel= selOut ,out=zr );
     Mux16(a= shifted,b= outAlu,sel=selOut,out= out);


}
