// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    /* decodes the instruction to (msb,nmsb,a,c's,d's,j's)*/
    DECODE(instruction=instruction,msb=msb,nmsb=nmsb,c1=c1,c2=c2,c3=c3,
    c4=c4,c5=c5,c6=c6,d1=d1,d2=d2,writeM=writeM,j1=j1,j2=j2,j3=j3);

    /*1. Selects between A to C instruction according to MSB */
    Mux16(a=instruction ,b= outAlu,sel= msb,out = Avalue);

    /*2. Load or read from A register*/
    ARegister(in= Avalue,load= d1,out=A,out[0..14]= addressM);

    /*3. Selects between A to M instruction according to a bit */
    Mux16(a=A, b= inM,sel= instruction[12],out= outY);    /* Y = A or M*/

    /*4. calculate alu output and put it in outM*/
    ALU(x= outD,y= outY,zx= c1,nx= c2 ,zy= c3,ny= c4,f= c5,no= c6,out= outM,out= outAlu,zr= zr,ng= ng); 

    /*5. Load or read from D register*/
    DRegister(in= outAlu,load= d2,out= outD);  

    /*6. g function for jumping*/
    GFUNC(j1=j1,j2=j2,j3=j3,zr=zr,ng=ng,out=outjmp);

    /*7. program counter handling*/
    PC(in= A,load= outjmp,inc= true,reset= reset,out[0..14]= pc);
}
