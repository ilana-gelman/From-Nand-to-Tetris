// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/

// This chip is an extension of the regular CPU that uses the extended ALU.
// If instruction[15]==0 or (instruction[14] and instruction[13] equals 1)
// the CpuMul behave exactly as the same as the regular CPU.
// If the instruction is a c-instruction and instruction[14] == 0, the chip will 
// behave as follows:
//  Instruction  | 12 | 11 | 10 |
// ______________________________
// dest=D<<;jump | 0  | 1  | 1  |
// dest=A<<;jump | 0  | 1  | 0  |
// dest=M<<;jump | 1  | 1  | 0  |
// dest=D>>;jump | 0  | 0  | 1  |
// dest=A>>;jump | 0  | 0  | 0  |
// dest=M>>;jump | 1  | 0  | 0  |

CHIP CpuMul {
    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).
    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction
    
    PARTS:
    // Put you code here:
     /* decodes the instruction to (msb,nmsb,a,c's,d's,j's)*/
    DECODE(instruction=instruction,msb=msb,nmsb=nmsb,c1=c1,c2=c2,c3=c3,
    c4=c4,c5=c5,c6=c6,d1=d1,d2=d2,writeM=writeM,j1=j1,j2=j2,j3=j3);

    /*1. Selects between A to C instruction according to MSB */
    Mux16(a=instruction ,b= outAlu,sel= msb,out = Avalue);

    /*2. Load or read from A register*/
    ARegister(in= Avalue,load= d1,out=A,out[0..14]= addressM);

    /*3. Selects between A to M instruction according to a bit */
    Mux16(a=A, b= inM,sel= instruction[12],out= outY);    /* Y = A or M*/

    /*4. calculate alu output and put it in outM*/
    ExtendAlu(x= outD,y= outY,instruction= instruction[6..14],out= outM,out= outAlu,zr= zr,ng= ng);

    /*5. Load or read from D register*/
    DRegister(in= outAlu,load= d2,out= outD);  

    /*6. g function for jumping*/
    GFUNC(j1=j1,j2=j2,j3=j3,zr=zr,ng=ng,out=outjmp);

    /*7. program counter handling*/
    PC(in= A,load= outjmp,inc= true,reset= reset,out[0..14]= pc);
}
