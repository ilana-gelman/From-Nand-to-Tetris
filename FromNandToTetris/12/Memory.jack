// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/
// It is an extension to the specifications given in  
// https://www.nand2tetris.org (Shimon Schocken and Noam Nisan, 2017)
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0 
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static Array freeList;
    static int segLenIndex;
    static int segNextIndex;
    static int heapLength;
    static int heapBase;

    /** Initializes the class. */
    function void init() {
        // Pseudocode:
        // 1. freeList = heapBase
        // 2. freeList.length = heapLength
        // 3. freeList.next = null
        let ram = 0;
        // [next,]
        let segLenIndex = 1; // as index for freeList
        let segNextIndex = 0;   //as index for freeList
        let heapLength = 14335;
        let heapBase = 2048;

        // init freeList to heapBase
        let freeList = heapBase;
        let freeList[segNextIndex] = null; //  next
        let freeList[segLenIndex] = heapLength;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
          return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return; 
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. Assume size > 0. */
    function int alloc(int size) {
        // Pseudocode:
        // 1. Search freeList using best-fit or first-fit heuristics to obtain
        //    a segment with segment.length > size.
        //    If no such segment is found, return -1.
        // 2. block = needed part of the found segment (or all of it, if the 
        //            segment remainder is too small).
        // 3. block[-1] = size + 1 // Remember block size, for de-allocation
        // 4. Update freeList to reflect the allocation
        // 5. Return block
        // The figure MemoryTest/MemoryFreeListExample.png illustrates how
        // the freeList should look like.
        var Array block;  
        var int address;
        var int segmentLength;
         // let segmentLength = size - 2;
        // size must be > 0
        if (~(size > 0))
        {
            return -1;
        }
          // Search freeList using best-fit or first-fit heuristics to obtain a segment with segment.length > size.
        // If no such segment is found, return -1.
        let block = Memory.firstFit(size); 

        return block;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        // Pseudocode:
        // 1. segment = o - 1
        // 2. Insert segment into the freeLis
        var int next;
        let next = freeList[segNextIndex];
        let freeList[segNextIndex] = o - 2;
        let o[segNextIndex] = next;
 
        return;
    }    

    /** Returns the maximal element contained in the given Array/object. 
     * Assume inputs are initialized and contain at least one element. */
	function int max(Array o) {
        var int currentSegment, maxVal;

        let currentSegment = freeList; // 2048
        let maxVal = currentSegment[segLenIndex];

        while(~(currentSegment = 0)) // while cur != null
        {
            let maxVal = Math.max(maxVal,currentSegment[segLenIndex]);
            let currentSegment = Memory.peek(currentSegment + segNextIndex); // cur = cur.next
        }
        return maxVal;
        // Hint: the algorithm you need to implement in Memory.alloc saves the
        // size of the allocated block in the memory cell right before the 
        // start of the block, and this can be used to implement Memory.max.
    }

    function int firstFit(int size)
    {
        var int currentSegment;
        var int segmentLength;
        var int block;
        var boolean segmentFound;
        

        let segmentFound = false;
        let currentSegment = freeList; // 2048

        // iterate over the freeList 
        while((~segmentFound) & (currentSegment > 0)) // while cur != null
        {

           let segmentLength = Memory.peek(currentSegment + segLenIndex) - 2;

           if (segmentLength > size) 
           {
               // allocte block
               let block = currentSegment + segmentLength - size + 1;  

               do Memory.poke(block - 1, size + 1); // Remember block size, for de-allocation  

               // update the size of the current segment after allocation

               do Memory.poke(currentSegment + segLenIndex, segmentLength - size + 1);
               let segmentFound = true; 

           }
           if (~(segmentFound))
           {
              let currentSegment = Memory.peek(currentSegment + segNextIndex); // cur = cur.next
           }

        }

        if (~segmentFound)
        {
            let block = -1;
        }
        return block;

        
    }
}
