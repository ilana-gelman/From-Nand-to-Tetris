// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/
// It is an extension to the specifications given in  
// https://www.nand2tetris.org (Shimon Schocken and Noam Nisan, 2017)
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0 
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;
    static int tempyq;

    /** Initializes the library. */
    function void init() {
        let twoToThe = Array.new(16);
        let twoToThe[0]  = 1;
        let twoToThe[1]  = 2;
        let twoToThe[2]  = 4;
        let twoToThe[3]  = 8;
        let twoToThe[4]  = 16;
        let twoToThe[5]  = 32;
        let twoToThe[6]  = 64;
        let twoToThe[7]  = 128;
        let twoToThe[8]  = 256;
        let twoToThe[9]  = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 16384 + 16384;
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0){
            return (-x);
        }
        else{
            return x;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum;
        var int shiftedX;
        var int i;
        
        let sum = 0;
        let shiftedX = x;
        let i = 0;

        while(i < 16)
        {
            if (Math.bit(y, i))
            {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }
        return sum;
    }

    
    /**
    * Returns true if the i-th bit of x is 1, false otherwise
    */
    function boolean bit(int x,int  i){
        var int y;
        let y = x & twoToThe[i];
        return (~(y = 0));
    }


    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int result, q, temp;
        var boolean isXNeg, isYneg;

        let isXNeg = x < 0;
        let isYneg = y < 0;

        let x = Math.abs(x);
        let y = Math.abs(y);

        // base case
        if ((y  > x) | (y < 0))
        {
            let tempyq = 0;
            return 0;
        }
        let q = Math.divide(x,y + y); // recursive call
        
        if (Math.bit(q,0) = true)
        {
            let tempyq = tempyq + y;
        }

        let result = q + q;
        let temp = tempyq + tempyq;

        if (~( x - temp < y))
        {
            let result = q + q + 1;
        }

        //  x, y are both negative or both positive
        if (isXNeg = isYneg)
        {
            return result;
        }
        else{
            return -result;
        }
    }
		// This should be implemented without using multiplication.
		// Hint: updating the value of 2*q*y in the "if" statement requires
		// at most a single addition operator at every recursion step.
    

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
		// This should be implemented without using division, but
		// multiplication is allowed.

        var int y,counter, candidate, squaredCandidate;
        let counter = 7;
        while (~(counter < 0))
        {
            let candidate = y + twoToThe[counter];
            let squaredCandidate = candidate * candidate;
            if (~(squaredCandidate > x) & (squaredCandidate > 0 ))
            {
                let y = candidate;
            }

            let counter = counter - 1;
        }

        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {

        if (a > b)
        {
            return a;
        }
        else{
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b){
            return a;
        }
        else{
            return b;
        }
    }
}
