// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int length;
    field int maximumLength;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if( maxLength = 0 ) {
            let maxLength = 1;
        }
        let str =  Array.new(maxLength);
        let length = 0;
        let maximumLength = maxLength;
        return this;
    }
    

    /** Disposes this string. */
    method void dispose() {
        do str.dispose();
        let length = 0 ;
        let maximumLength = 0;
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if (~(j < maximumLength))
        {
            return 0;
        }
        return str[j]; 
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (~(length = maximumLength))
        {
            let str[length] = c;
            let length = length +1 ;
        }

        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if(length > 0){
            let length = length -1 ;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val; // returned integer value
        var int  i ; // index 
        var int d; // integer value of str[i]
        let i = 0;
        
        if(str[0] = 45){ // str[0] == '-'
           let i = 1;
        }
        // looping on str array 
        while( i < length ){
            if(String.isDigit(str[i]) = false){
                if(str[0] = 45){ // str[0] == '-'
                    let val = (-1) * val;
                }   
                return val;
            }
            let d = str[i] - 48;
            let val = (val * 10) + d; 
            let i = i + 1; 
        }
        if(str[0] = 45){ // str[0] == '-'
           let val = (-1) * val;
        }
        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let length = 0;
        // Handle negetive value
        if( val < 0){
            let val = -val; //turns to positive
            do appendChar(45);
        }

        do setIntHelper(val);
        return;

    }

    method void setIntHelper(int val)
    {
        var int lastDigit;
        var int moduluVal;

        if (val < 10)
        {
            do appendChar(val + 48);
            return;
        }
        else
        {
            let moduluVal = val;
            while(moduluVal>9){
                let moduluVal = moduluVal - 10;
            }
        }

        let val = val / 10;
        do setIntHelper(val);
        let lastDigit = moduluVal + 48 ;
        do appendChar(lastDigit);
        return;

    }
    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }

    /** Returns true if given char is digit. false otherwise */
    function boolean isDigit(char c){
        if ( ( ( 48 < c ) | ( c = 48 ) ) & ( ( c < 57) | ( c = 57) ) )
        {
            return true;
        }
        else{
            return false;
        }
    }
}
